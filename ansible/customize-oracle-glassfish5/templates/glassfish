#! /bin/sh
### BEGIN INIT INFO
# Provides:          glassfish
# Required-Start:    $local_fs $remote_fs $syslog $network
# Required-Stop:     $local_fs $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Glassfish at boot time
# Description:       Enable service provided by Glassfish
### END INIT INFO

# Author: Jardel Weyrich <jweyrich@gmail.com>

# Do NOT "set -e"

GLASSFISH_USER={{runas}}
GLASSFISH_DOMAIN={{env}}
GLASSFISH_HOME=${GLASSFISH_HOME:-"/usr/local/glassfish5"}
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Glassfish"
NAME=glassfish
ASADMIN="$GLASSFISH_HOME/bin/asadmin"
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$ASADMIN" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
#. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
#. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running (NOT CURRENTLY SUPPORTED)
	#   2 if daemon could not be started
	/bin/su $GLASSFISH_USER -s /bin/bash -c "$ASADMIN start-domain --domaindir $GLASSFISH_HOME/glassfish/domains $GLASSFISH_DOMAIN" || return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped (NOT CURRENTLY SUPPORTED)
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	/bin/su $GLASSFISH_USER -s /bin/bash -c "$ASADMIN stop-domain --domaindir $GLASSFISH_HOME/glassfish/domains $GLASSFISH_DOMAIN" || return 2
	return 0
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	log_daemon_msg "Reloading $DESC IS NOT CURRENTLY SUPPORTED"
	return 2
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	log_daemon_msg "Querying status of $NAME IS NOT CURRENTLY SUPPORTED" && exit 1
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
