---
- hosts: control_plane
  become: yes
  vars:
    helm_architecture: 'amd64'
    helm_mirror: 'https://get.helm.sh'
    helm_install_dir: '/usr/local/share/helm'
    helm_download_dir: "{{ x_ansible_download_dir | default(ansible_env.HOME + '/.ansible/tmp/downloads') }}"
    helm_os: 'linux'
    helm_redis_filename: 'helm-v{{ helm_version }}-{{ helm_os }}-{{ helm_architecture }}.tar.gz'
    helm_version: '3.10.2'
  tasks:
    - name: create download directory
      file:
        state: directory
        mode: 'u=rwx,go=rx'
        dest: '{{ helm_download_dir }}'
      tags:
        - build

    - name: download sha256sum
      get_url:
        url: '{{ helm_mirror }}/{{ helm_redis_filename }}.sha256'
        dest: '{{ helm_download_dir }}/{{ helm_redis_filename }}.sha256'
        force: no
        validate_certs: yes
        mode: 'u=rw,go=r'
      tags:
        - build

    - name: read sha256sum
      slurp:
        src: '{{ helm_download_dir }}/{{ helm_redis_filename }}.sha256'
      register: helm_sha256sum
      tags:
        - build

    - name: download Helm
      get_url:
        url: '{{ helm_mirror }}/{{ helm_redis_filename }}'
        dest: '{{ helm_download_dir }}/{{ helm_redis_filename }}'
        checksum: 'sha256:{{ helm_sha256sum.content | b64decode | trim }}'
        force: no
        validate_certs: yes
        mode: 'u=rw,go=r'
      tags:
        - build

    - name: check current version
      command: >
        {{ helm_install_dir }}/helm version --client --template {{ "'{{ if .Version }}{{ .Version }}{{ else }}{{ .Client.SemVer }}{{ end }}'" }}
      register: helm_current_version
      failed_when: no
      changed_when: no
      tags:
        - build

    - name: current version
      debug:
        msg: '{{ helm_current_version.stdout }}'
      when: helm_current_version.rc == 0
      tags:
        - build

    - name: remove existing installation
      become: yes
      file:
        path: '{{ helm_install_dir }}'
        state: absent
      when:
        - helm_current_version.rc == 0
        - helm_current_version.stdout != ('v' + helm_version)
      tags:
        - build

    - name: create the Helm installation dir
      become: yes
      file:
        state: directory
        owner: root
        group: root
        mode: 'u=rwx,go=rx'
        dest: '{{ helm_install_dir }}'
      tags:
        - build

    - name: install Helm
      become: yes
      unarchive:
        src: '{{ helm_download_dir }}/{{ helm_redis_filename }}'
        remote_src: yes
        dest: '{{ helm_install_dir }}'
        extra_opts:
          - '--strip-components=1'
        owner: root
        group: root
        mode: 'o-w'
        creates: '{{ helm_install_dir }}/helm'
      tags:
        - build

    - name: create helm link
      become: yes
      file:
        src: '{{ helm_install_dir }}/helm'
        dest: '/usr/local/bin/helm'
        state: link
        owner: root
        group: root
        mode: 'u=rwx,go=rx'
      tags:
        - build

- hosts: control_plane
  become: yes
  become_user: ubuntu
  vars:
  tasks:
    - name: Add the bitnami repo for external dns and update helm
      shell: helm repo add bitnami https://charts.bitnami.com/bitnami && helm repo update
      args:
        chdir: $HOME

    - name: Add the ingress-nginx repo and update helm
      shell: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx && helm repo update
      args:
        chdir: $HOME

    - name: Add the jetpack repo and update helm
      shell: helm repo add jetstack https://charts.jetstack.io && helm repo update
      args:
        chdir: $HOME


    - name: Add the new relic repo and update helm
      shell: helm repo add newrelic https://helm-charts.newrelic.com && helm repo update
      args:
        chdir: $HOME


    - name: Add the kubernetes dashboard repo and update helm
      shell: helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      args:
        chdir: $HOME
