name: Packer Builder

on:
  push:
  issue_comment:
    types: [created]

  pull_request:
    types: [opened, reopened, closed]
    paths:
      - 'packer/**/*.json'
      - 'packer/**/*.hcl'

jobs:
  pr_load:
    needs: comment
    name: Load Branch Details Outside Container
    if: |
      ( endsWith(github.event.comment.body, 'build') ||
      endsWith(github.event.comment.body, 'dev') ||
      endsWith(github.event.comment.body, 'prod') )
      && startsWith(github.event.issue.pull_request.url, 'https://')
    outputs:
      pr_branch: ${{ steps.load-pr.outputs.branch  }}
    runs-on: ubuntu-latest
    steps:
      - name: Load PR Details
        id: load-pr
        run: |
          set -eu
          resp=$(curl -sSf --url ${{ github.event.issue.pull_request.url }} --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'  --header 'content-type: application/json')
          branch=$(python3 -c "import sys, json; print(json.load(sys.stdin)['head']['ref'])" <<< "$resp")
          echo "::set-output name=branch::$branch"

  linter:
    name: Code Lint
    if: |
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container: 
      ##Using packer light which is tied to latest, currently at 1.7.2
      image: hashicorp/packer@sha256:523457b5371562c4d9c21621ee85c71c31e7ff53d5ec303a5daf07c55531b84e
    steps:
      - name: Checkout code from env Branch
        id: checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH  }}
      - name: Lint Packer Files
        id: lint
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE
          echo "::set-output name=result::$(packer validate --syntax-only ./packer)"
          packer validate --syntax-only ./packer
    outputs:
      r: ${{ steps.lint.outputs.result }}
  
  dev_builder:
    name: Development Builder
    if: |
      endsWith(github.event.comment.body, 'build dev')
      && startsWith(github.event.issue.pull_request.url, 'https://')
    needs: [pr_load]
    runs-on: ubuntu-latest
    container:
      ##Using packer light which is tied to latest, currently at 1.7.2
      image: hashicorp/packer@sha256:516a72625ab41f03754e4b31465bdb3d46ac2d9dfefcc10df2ad59e7212b67fe
    steps:
      - name: Checkout Code From PR Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.pr_load.outputs.pr_branch }}
      - name: Run Packer Build
        id: build
        run: cd $GITHUB_WORKSPACE && sh scripts/packer-builder.sh ${{ github.event.comment.body}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PACKER_BUILD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PACKER_BUILD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-2
      - name: Artifact upload
        uses: actions/upload-artifact@v2
        with:
          name: dev_manifest
          path: ${{ github.workspace }}/packer-manifest.json

  prod_builder:
    name: Production Builder
    if: |
      ( endsWith(github.event.comment.body, 'build') ||
      endsWith(github.event.comment.body, 'build prod') )
      && startsWith(github.event.issue.pull_request.url, 'https://')
    needs: [pr_load]
    environment: prod
    runs-on: ubuntu-latest
    container:
      ##Using packer light which is tied to latest, currently at 1.7.2
      image: hashicorp/packer@sha256:516a72625ab41f03754e4b31465bdb3d46ac2d9dfefcc10df2ad59e7212b67fe
    steps:
      - name: Checkout Code From PR Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.pr_load.outputs.pr_branch }}
      - name: Run Packer Build
        id: build
        run: cd $GITHUB_WORKSPACE && sh scripts/packer-builder.sh ${{ github.event.comment.body}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PACKER_BUILD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PACKER_BUILD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-2
      - name: Artifact upload 
        uses: actions/upload-artifact@v2
        with:
          name: prod_manifest
          path: ${{ github.workspace }}/packer-manifest.json

  comment:
    name: Comment Init
    if: |
      github.event_name == 'issue_comment' &&
      startsWith(github.event.comment.body, 'packer') &&
      startsWith(github.event.issue.pull_request.url, 'https://')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code from env Branch
        if: endsWith(github.event.comment.body, 'build -h')
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH  }}
      - name: Run Packer Build -h
        if: endsWith(github.event.comment.body, 'build -h')
        id: helper_build
        run: |
          cd $GITHUB_WORKSPACE && 
          sh scripts/packer-builder.sh packer build -h > help.txt
      - name: Read in the help file
        if: endsWith(github.event.comment.body, 'build -h')
        id: sanitized_help
        run: | 
          HELP=$(cat ./help.txt)
          HELP="${HELP//$'\n'/'\n'}"
          HELP="${HELP//$'\r'/'\r'}"
          HELP="${HELP//$'\t'/'\t'}"
          echo "::set-output name=help::$(echo "$HELP")"
      - name: Add comment on Builder Helper
        if: endsWith(github.event.comment.body, 'build -h')
        env:
          URL: ${{ github.event.issue.comments_url }}
          GITHUB_TOKEN: ${{ secrets.FOE_PAT }}
          API_VERSION: "application/vnd.github.v3.json"
          GITHUB_COMMENT: ${{ steps.sanitized_help.outputs.help}}
        run: |
          curl \
            -X POST $URL \
            -H "Accept: $API_VERSION" \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d '{"body":"${{ env.GITHUB_COMMENT}} "}'

  prod_build_output:
    name: Prod Code Build Output
    environment: prod
    needs: [prod_builder]
    runs-on: ubuntu-latest
    steps:
      - name: Successful Build Artifact download 
        if: needs.prod_builder.result == 'success' 
        uses: actions/download-artifact@v2
        with:
          name: prod_manifest
      - name: Get the artifact ids
        if: needs.prod_builder.result == 'success' 
        id: result
        run: >
          echo "::set-output name=artifact_id::$(jq -r
          '.builds[0].artifact_id
          | split(",")
          | map(split(":") | "\(.[1]) (\(.[0]))")
          | join("\\n")'
          ./packer-manifest.json)"
      - name: Add comment on Production Builder Success
        if: needs.prod_builder.result == 'success' 
        env:
          URL: ${{ github.event.issue.comments_url }}
          GITHUB_TOKEN: ${{ secrets.FOE_PAT }}
          API_VERSION: "application/vnd.github.v3.json"
          GITHUB_COMMENT: "On PR close, your AMIs will be available. Optional: type `approve_prod` to distribute new images!. :tada:"
        run: |
          curl \
            -X POST $URL \
            -H "Accept: $API_VERSION" \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d '{"body":"Successfully built AMIs:\n${{ steps.result.outputs.artifact_id }}\n\n${{ env.GITHUB_COMMENT}} "}'

  dev_build_output:
    name: Dev Code Build Output
    needs: [dev_builder]
    runs-on: ubuntu-latest
    steps:
      - name: Successful Build Artifact download 
        if: needs.dev_builder.result == 'success' 
        uses: actions/download-artifact@v2
        with:
          name: dev_manifest
      - name: Get the artifact ids
        if: needs.dev_builder.result == 'success' 
        id: result
        run: >
          echo "::set-output name=artifact_id::$(jq -r
          '.builds[0].artifact_id
          | split(",")
          | map(split(":") | "\(.[1]) (\(.[0]))")
          | join("\\n")'
          ./packer-manifest.json)"
      - name: Add comment on Development Builder Success
        if: needs.dev_builder.result == 'success' 
        env:
          URL: ${{ github.event.issue.comments_url }}
          GITHUB_TOKEN: ${{ secrets.FOE_PAT }}
          API_VERSION: "application/vnd.github.v3.json"
          GITHUB_COMMENT: "Try `packer build prod` next! :tada:"
        run: |
          curl \
            -X POST $URL \
            -H "Accept: $API_VERSION" \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d '{"body":"Successfully built AMIs:\n${{ steps.result.outputs.artifact_id }}\n\n${{ env.GITHUB_COMMENT}} "}'

  prod_approve:
    name: Prod AMI Image Approval and Distro
    needs: pr_load
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' &&
      startsWith(github.event.comment.body, 'approve_prod') &&
      startsWith(github.event.issue.pull_request.url, 'https://')
    environment: prod
    steps:
      - name: Checkout Code From PR Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.pr_load.outputs.pr_branch }}
      - name: Approve 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PACKER_BUILD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PACKER_BUILD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-2
        shell: bash
        run: cd $GITHUB_WORKSPACE && bash scripts/packer-approver.sh
